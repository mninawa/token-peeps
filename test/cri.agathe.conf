sap {
    name = CVP
    remote.programid = "AGT_COSMICINT_CVP010"
    gateway = ${sap.snc} {
        jco.server.gwhost =pcvpcs00.sap.azure.cloud.bmw 
        jco.server.gwserv = 3300
        jco.server.progid = ${sap.remote.programid}
        jco.server.repository_destination = CVP_REG
        jco.server.connection_count = 2
    }
    connection = ${sap.snc} {
        jco.client.client = "010"
        jco.client.lang = en
        jco.client.mshost = pcvpcs00.sap.azure.cloud.bmw
        jco.client.msserv = 3600
        jco.client.r3name = CVP_REG
        jco.client.group = public
        jco.destination.peak_limit = 10
        jco.destination.pool_capacity = 3
    }
    default.IDocheaders {
        RCVPRN = CVPCLNT010
        RCVPRT = LS
        SNDPRN = AGATHEPRD
        SNDPOR = AGATHEPRD
        SNDPRT = LS
    }
}

kafka {
  general {
    bootstrap.servers = "lkc-2vmym-4kxv6.westeurope.azure.glb.confluent.cloud:9092"
    security.protocol = SASL_SSL
    sasl.mechanism = PLAIN
    client.dns.lookup = use_all_dns_ips
    sasl.jaas.config = ${Sasl_jaas_config}
    metadata.max.age.ms = 210000
  }
  producer = ${kafka.general}
  consumer = ${kafka.general} {
    group.id =bmw.cosmicintlfsm.connect.agathe.cvp
    auto.offset.reset = latest
  }
  streams {
	    application.id = bmw.cosmicintlfsm.connect.agathe.streams.cvp
  }
}

pipelines {
    "COSMICINTLFSM.OFFER.FILTER" {
        from {
            type = KAFKA
            topic = bmw.cosmicintlfsm.Offer.v1
        }
        transformation = offerFilterTransform
        to {
            type = KAFKA
            topic = bmw.cosmicintlfsm.Offer.v1.filtered
        }
        error-strategy = DLQ
        dead-letter-queue {
            type = KAFKA
            topic =  bmw.cosmicintlfsm.Offer.v1.filter.dlq
        }
        skip-nulls = true
    }
    "COSMICINTLFSM.OFFER" {
        from {
            type = KAFKA
            topic= bmw.cosmicintlfsm.Offer.v1.enriched
        }
        to {
            type = composite
            main {
                transformation = offerTransform
                type = SAPIDOC
                idocheader = ${sap.default.IDocheaders} {
                    MESTYP = /BMW/ISI_I5006_OFCO
                    IDOCTYP = /BMW/ISI_I5006_OFCO
                }
            }
            secondary {
                transformation = offerAuditTransform
                type = KAFKA
                topic = bmw.cosmicintlfsm.Offer.v1.audit
            }
        }
        error-strategy = DLQ
        dead-letter-queue {
            type = KAFKA
            topic =  bmw.cosmicintlfsm.Offer.v1.transformation.dlq
        }
        skip-nulls = true
    }
    "COSMICINTLFSM.VEHHANDOVER.FILTER" {
        from {
            type = KAFKA
            topic = bmw.deliveryapp.VehicleHandover.v1
        }
        transformation = vehicleHandoverFilterTransform
        to {
            type = KAFKA
            topic = bmw.cosmicintlfsm.VehicleHandover.v1.filtered
        }
        error-strategy = DLQ
        dead-letter-queue {
            type = KAFKA
            topic =  bmw.cosmicintlfsm.VehicleHandover.v1.filter.dlq
        }
        skip-nulls = true
    }
    "COSMICINTLFSM.VEHHANDOVER" {
        from {
          type = KAFKA
          topic= bmw.cosmicintlfsm.VehicleHandover.v1.filtered
        }
        to {
            type = composite
            main {
                transformation = vehicleHandoverTransform
                type = SAPIDOC
                idocheader = ${sap.default.IDocheaders} {
                    MESTYP = /BMW/ISI_I5018_DAPP
                    IDOCTYP = /BMW/ISI_I5018_DAPP
                }
            }
            secondary {
                transformation = vehicleHandoverAuditTransform
                type = KAFKA
                topic = bmw.cosmicintlfsm.VehicleHandover.v1.audit
            }
        }
        error-strategy = DLQ
        dead-letter-queue {
            type = KAFKA
            topic =  bmw.cosmicintlfsm.VehicleHandover.v1.transformation.dlq
        }
        skip-nulls = true
    }
    "COSMICINTLFSM.VEHFINRELEASE" {
        from {
          type = SAPIDOC
          idoctype = /BMW/ISI_I5023_IDOC_TYPE
        }
        transformation = vehicleFinReleaseTransform
        to {
            type = KAFKA
            topic = bmw.cosmicintlfsm.VehicleFinancialRelease.v1
        }
        error-strategy = DLQ
        dead-letter-queue {
            type = KAFKA
            topic = bmw.cosmicintlfsm.VehicleFinancialRelease.v1.dlq
        }
        skip-nulls = true
    }
    "COSMICINTLFSM.VEHCOMMISSION" {
        from {
            type = SAPIDOC
            idoctype = /BMW/ISI_I5025_INVOIC02
        }
        transformation = vehicleCommissionTransform
        to {
            type = KAFKA
            topic = bmw.cosmicintlfsm.VehicleCommission.v1
        }
        error-strategy = DLQ
        dead-letter-queue {
            type = KAFKA
            topic =  bmw.cosmicintlfsm.VehicleCommission.v1.dlq
        }
        skip-nulls = true
    }
    "COSMICINTLFSM.VEHINVOICE" {
        from {
          type = SAPIDOC
          idoctype = INVOIC02
        }
        transformation = vehicleInvoiceTransform
        to {
          type = KAFKA
          topic = bmw.cosmicintlfsm.VehicleInvoice.v1
        }
        error-strategy = DLQ
        dead-letter-queue {
          type = KAFKA
          topic =  bmw.cosmicintlfsm.VehicleInvoice.v1.dlq
        }
        skip-nulls = true
    }
    "COSMICINTLFSM.VEHPAYMENT" {
        from {
          type = SAPIDOC
          idoctype = /BMW/ISI_I5027_HEADER
        }
        transformation = vehiclePaymentTransform
        to {
          type = KAFKA
          topic = bmw.cosmicintlfsm.VehiclePayment.v1
        }
        error-strategy = DLQ
        dead-letter-queue {
          type = KAFKA
          topic =  bmw.cosmicintlfsm.VehiclePayment.v1.dlq
        }
        skip-nulls = true
    }
    "COSMICINTLFSM.VEHINTERCOINV" {
        from {
          type = SAPIDOC
          idoctype = /BMW/ISI_I5026_IDOC_TYPE
        }
        transformation = vehicleIntercoInvoiceTransform
        to {
          type = KAFKA
          topic = bmw.cosmicintlfsm.VehicleIntercoInvoice.v1
        }
        error-strategy = DLQ
        dead-letter-queue {
          type = KAFKA
          topic =  bmw.cosmicintlfsm.VehicleIntercoInvoice.v1.dlq
        }
        skip-nulls = true
    }
    ################################################Test Pipeline##################################
    #Below test pipeline can be deleted once actual test pipelines are enabled for this instance.
    "Test Pipeline for CVI Instance" {
        error-strategy = FAIL
        from {
          type = generator
          id = Welcome
          count = 1
          message = "Agathe pipelines are running"
        }
        to {
            type = logger
        }
    }
}

transformations {
    offerFilterTransform = """
    jsonTransformation {
        val SIGNED = "SIGNED"
        val ORDERED = "ORDERED"
        val CONFIRMED = "CONFIRMED"
        val INVALID = "INVALID"

        val signedAt by value { optional number "contract" / "signedAt" }
        val pStatus by value { mandatory string "status" }
        val owner by value { optional string "customerData" / "ownerId" }
        val orderRequestState by value { optional string "orderRequestState" }

        whenever {
            pStatus.value in listOf(ORDERED, CONFIRMED)
            ||
            (pStatus holds SIGNED && orderRequestState.value == null && signedAt.value != null)
            ||
            (pStatus holds INVALID && owner.value != null && signedAt.value != null)
        } then {
            add optional header / "offerNumber" type string from "offerNumber"
            copy mandatory root
        } otherwise {
            set optional root to null
        }
    }
    """
    offerTransform = """
    jsonTransformation {
        val brand = string mapper {
            when (it) {
                "MOTORBIKE" -> "MC"
                else -> it.take(2)
            }
        }
        val market = string mapper {
            when (it) {
                "DE" -> "A1D1"
                "IT" -> "E7D1"
                "PL" -> "NXD1"
                "SE" -> "H9D1"
                "FR" -> "E6D1"
                "AT" -> "C6D1"
                "CH" -> "F1D1"
                "ES" -> "F4D1"
                "GR" -> "DSD1"
                "GB" -> "D9D1"
                "IE" -> "DPD1"
                "DK" -> "DQD1"
                "NO" -> "T1D1"
                "FI" -> "T2D1"
                "CZ" -> "NKD1"
                "SK" -> "NJD1"
                "HU" -> "NYD1"
                "RO" -> "NQD1"
                "BG" -> "NRD1"
                "SI" -> "NPD1"
                "BE" -> "E9D1"
                "NL" -> "F6D1"
                "LU" -> "E9D1"
                else -> "N/A"
            }
        }
        val division = string mapper {
            when (it) {
                "YUC" -> "UV"
                "USED" -> "UV"
                else -> "NV"
            }
        }
        val registrationOption = string mapper {
            when (it) {
                "NONE" -> "OPT-OUT"
                "THIRD_PARTY" -> "OPT-OUT"
                "OFFER_ACCOUNT" -> "OPT-IN"
                else -> null
            }
        }
        val discounts = string mapper {
            when (it) {
                "oemDiscount" -> "OEM_DISCOUNT"
                else -> null
            }
        }
        val SIGNED = "SIGNED"
        val ORDERED = "ORDERED"
        val CONFIRMED = "CONFIRMED"

        val outputFormat = java.time.format.DateTimeFormatter.ofPattern("yyyyMMdd")
        val formatDate = long mapper { days ->
            val dateTime = LocalDate.ofEpochDay(days)
            outputFormat.format(dateTime)
        }
        val TRADEINCATEGORY = "TRADE_INS_TOTAL"
        val ECOBONUSCATEGORY = "DUTY"
        val PAYERAMOUNTCATEGORY = "TPLOAN_AMOUNT"

        val additionalPricesByCategory by value {
            (mandatory array "additionalPrices").associate {
                extract(it) { (mandatory string "price" / "category") to (mandatory obj "price") }
            }
        }
        val signedAt by value { optional number "contract" / "signedAt" }
        val pStatus by value { mandatory string "status" }
        set mandatory "/BMW/ISI_I5006_HEADER" by {
            set mandatory "OFFERID" type string from "id"
            set mandatory "OFFERNUMBER" type number from "offerNumber"
            add optional header / "offerNumber" from "offerNumber"
            within("vehicle" / "orders" / 0) {
                whenever { pStatus holds ORDERED || pStatus holds CONFIRMED } then {
                    set mandatory "ORDERNUMBER" type string from "orderNumber"
                } otherwise {
                    set optional "ORDERNUMBER" type string from "orderNumber"
                }
                set optional "VHVIN" type string from "vin17"
            }
            set mandatory "OFFERVERSION" type number from "offerVersion"
            set mandatory "STATUS" type string from "status"
            set optional "PAYMENTMETHOD" type string from "paymentMethod"
            whenever { pStatus holds SIGNED } then {
                set mandatory "MARKET" type string map market from "market"
                set mandatory "BRAND" type string map brand from "vehicle" / "brand"
                set mandatory "DIVISION" type string map division from "vehicle" / "vehicleCategory"
            } otherwise {
                set optional "MARKET" type string map market from "market"
                set optional "BRAND" type string map brand from "vehicle" / "brand"
                set optional "DIVISION" type string map division from "vehicle" / "vehicleCategory"
            }
            set optional "CURRENCY" type string from "currency"
            set optional "SIGNEDAT" type long map formatDate from signedAt
            within("customerData") {
                set optional "CONDITIONPROVIDER" type string from "conditionProviderId"
                set optional "KEEPER" type string from "keeperId"
                set mandatory "OWNER" type string from "ownerId"
                set optional "OWNERUUID" type string from "ownerAddressUuid"
                set optional "REGBRANCH" type string from "thirdPartyRegistrationId"
                set mandatory "PAYER" type string from "payerId"
                set mandatory "INVRECIPIENT" type string from "invoiceReceiverId"
                set optional "WISHDATE" type string from "handoverDate"
                set optional "REGOPTION" type string map registrationOption from "registrationAccountType"
            }
            set optional "EXTLEASENR" type string from "externalLeasingReference"
            set optional "MILEAGE" type string from "vehicle" / "mileage"
            within("sfPaymentDetails") {
                set optional "LEASEFLAG" type string from "productCategoryType"
                set optional "SFCONTRACTNR" type string from "applicationNumber"
                set optional "BANKGCID" type string from "nfscGcid"
            }
            set optional "CANCELLATIONREASON" type string from "invalidationInfo" / "cancellationReason"

            within("paymentPlan") {
                set optional "PVS_STATUS" type string from "status"
                set optional "PVS_NUMBER" type string from "number"
                set optional "PVS_VERSION" type string from "version"
                set optional "REMARK1" type string from "invalidationInfo" / 0 / "invalidationReason"
            }
        }
        val vehicleOptionsItems by variable { emptyArray }
        val vehicleServiceOptionsItems by variable { emptyArray }
        val vehicleIndividualOptionsItems by variable { emptyArray }
        val vehicleModelItem by variable { emptyObject }

        val vehicleOptions by value { optional array "vehicle" / "options" }
        whenever { !(vehicleOptions holds null) } then {
            set variable vehicleOptionsItems from "vehicle" / "options" by {
                set optional "MATERIAL" type string from "code"
                set optional "TYPE" type string from "type"
                within("price") {
                    set optional "NETLISTPRICE" type double from "netListPrice"
                    set optional "TAX" type double from "totalTaxes"
                }
            }
        }
        val serviceOptions by value { optional array "vehicle" / "serviceOptionsTotal" / "serviceOptions" }
        whenever { !(serviceOptions holds null) } then {
            set variable vehicleServiceOptionsItems from "vehicle" / "serviceOptionsTotal" / "serviceOptions" by {
                set optional "MATERIAL" type string from "code"
                set optional "NETLISTPRICE" type double from "price" / "netListPrice"
            }
        }
        val individualOptions by value { optional array "vehicle" / "individualOptionsTotal" / "serviceOptions" }
        whenever { !(individualOptions holds null) } then {
            set variable vehicleIndividualOptionsItems from "vehicle" / "individualOptionsTotal" / "serviceOptions" by {
                set optional "MATERIAL" type string from "code"
                set optional "NETLISTPRICE" type double from "price" / "netListPrice"
            }
        }
        set variable vehicleModelItem from "vehicle" / "model" by {
            whenever { pStatus holds ORDERED || pStatus holds CONFIRMED } then {
                set mandatory "MATERIAL" type string from "vgModelCode"
            } otherwise {
                set optional "MATERIAL" type string from "vgModelCode"
            }
            within("price") {
                set mandatory "NETLISTPRICE" type double from "netListPrice"
                set optional "TAX" type double from "totalTaxes"
            }
            set optional "DISCOUNT" type double from additionalPricesByCategory / "PRODUCT_TOTAL" / "netDiscount"
        }
        set optional "/BMW/ISI_I5006_ITEMS" from { vehicleOptionsItems.value + vehicleServiceOptionsItems.value + vehicleIndividualOptionsItems.value + vehicleModelItem.value }

        set mandatory "/BMW/ISI_I5006_ACCESSORIES" by {
            set mandatory root type array default emptyArray from "vehicle" / "originalAccessoryTotal" / "accessories" by {
                set optional "MATERIAL" type string from "key"
                set optional "NETLISTPRICE" type double from "accessoryPrice" / "netListPrice"
                set optional "TAX" type double from "accessoryPrice" / "totalTaxes"
                set optional "QUANTITY" type number from "quantity"

                set optional "/BMW/ISI_I5006_PARTS" by {
                    set optional root type array default emptyArray from "includedParts" by {
                        val key by value { (optional string "key") }
                        whenever { !(key holds null) } then {
                            set optional "PARTNR" type string from key
                            set optional "PARTQTY" type number from "quantity"
                            set optional "PARTLISTPRICE" type double from "price" / "netListPrice"
                            set optional "PARTTAX" type double from "price" / "totalTaxes"
                        }
                    }

                }
            }
        }
        set mandatory "/BMW/ISI_I5006_PRICING" type array map {
            it.flatMap { it as? List<*> ?: listOf(it) }
        } by {
            set mandatory root type array default emptyArray where {
                optional string "CATEGORY" in listOf("DUTY", "PROPORTIONAL_DUTY")
            } from additionalPricesByCategory / "PRODUCT_WITH_DUTIES_TOTAL" / "taxList" by {
                set optional "CATEGORY" type string from "taxCategory"
                set optional "TAXKEY" type string from "taxKey"
                set optional "VALUE" type double from "taxValue"
            }
            set optional "-" from additionalPricesByCategory / "ECO_BONUS_GOV" by {
                set optional "CATEGORY" type string to ECOBONUSCATEGORY
                set optional "TAXKEY" type string from "category"
                set optional "VALUE" type double from "netListPrice"
            }
            set optional "-" from additionalPricesByCategory / "ECO_BONUS_REG" by {
                set optional "CATEGORY" type string to ECOBONUSCATEGORY
                set optional "TAXKEY" type string from "category"
                set optional "VALUE" type double from "netListPrice"
            }
            set optional "-" from "downPaymentTotal" / "price" by {
                whenever { pStatus holds SIGNED } then {
                    set mandatory "CATEGORY" type string from "category"
                    set mandatory "VALUE" type double from "grossListPrice"
                } otherwise {
                    set optional "CATEGORY" type string from "category"
                    set optional "VALUE" type double from "grossListPrice"
                }
            }
            val transportDeliveryCostTotal by value {optional obj "transportDeliveryCostTotal" default json {
                "price" {
                    "category" to "ONL_TOTAL";
                    "netListPrice" to 0.0 }
                }
            }
            set mandatory "-" from transportDeliveryCostTotal by {
                set mandatory "CATEGORY" type string from "price" / "category"
                set mandatory "VALUE" type double from "price" / "netListPrice"
            }
            set optional "-" from "sfPaymentDetails" by {
                set optional "CATEGORY" type string map { "${it}_TOTAL" } from "productCategoryType"
                set optional "VALUE" type double from "downPayment"
            }
            val paidByDealer by value { optional number "paidByDealer" default 0 }
            set optional "-" by {
                set optional "CATEGORY" type string to TRADEINCATEGORY
                set optional "VALUE" type double from paidByDealer
            }
            set optional "-" from additionalPricesByCategory / "PRODUCT_TOTAL" by {
                set optional "CATEGORY" type string from "category"
                set optional "VALUE" type double from "netPrice"
            }
            set optional "-" from "discounts" by {
                set optional "CATEGORY" type string map discounts from "discountType"
                set optional "VALUE" type string from "netAggregatedDiscount"
            }

            val payerAmount by value { optional number "payerAmount" default 0 }
            set optional "-" by {
                set optional "CATEGORY" type string to PAYERAMOUNTCATEGORY
                set optional "VALUE" type double from payerAmount
            }
        }
    }
    """
    offerAuditTransform = """
    jsonTransformation {
        set optional "iDocNumber" type string from header / "iDocNumber"
        set optional "offerNumber" type string from header/ "offerNumber"
    }
    """
    vehicleHandoverFilterTransform = """
    jsonTransformation {
        val status by value { mandatory boolean "eventInformation" / "fsmDelivery" }
        val plannedDate by value { (optional string "planning" / "plannedDate")?.takeIf { it.isNotEmpty() } }
        val handoverDate by value { (optional string "completion" / "handoverDate")?.takeIf { it.isNotEmpty() } }

        whenever { status holds true && (plannedDate doesNotHold null || handoverDate doesNotHold null)
        } then {
            add optional header / "offerNumber" type string from "externalKeys" / "offerNumber"
            copy mandatory root
        } otherwise {
            set optional root to null
        }
    }
    """
    vehicleHandoverTransform = """
    jsonTransformation {
        val inputFormat = java.time.format.DateTimeFormatter.ISO_DATE_TIME // in: '2011-12-03T10:15:30Z'
        val outputFormat = java.time.format.DateTimeFormatter.ofPattern("yyyyMMdd") // out: '20111203'

        val formatDate = string mapper { date ->
            val dateTime = inputFormat.parse(date, java.time.ZonedDateTime::from)
            outputFormat.format(dateTime)
        }
        val plannedDate by value { (optional string "planning" / "plannedDate")?.takeIf { it.isNotEmpty() } }
        val handoverDate by value { (optional string "completion" / "handoverDate")?.takeIf { it.isNotEmpty() } }
        set mandatory "/BMW/ISI_I5018_HEADER" by {
            set mandatory "BSTNK" type string from "externalKeys" / "ivsOrderNumber"
            set mandatory "VHVIN" type string from "vehicle" / "vin"
            set optional "PDDATE" type string map formatDate from plannedDate
            set optional "TORDAT" type string map formatDate from handoverDate
        }
    }
    """
    vehicleHandoverAuditTransform = """
    jsonTransformation {
        set optional "iDocNumber" type string from header / "iDocNumber"
        set optional "offerNumber" type string from header/ "offerNumber"
    }
    """
    vehicleFinReleaseTransform = """
    jsonTransformation {
        set mandatory key from "/BMW/ISI_I5023_HEADER" / "CONTRNO"
        add optional header / "iDocNumber" from header / "agathe.internal.source.iDocNumber"
        within("/BMW/ISI_I5023_HEADER") {
            set mandatory "SalesContract" by {
                set mandatory "destinationCountry" type string from "COUNTRY"
                set mandatory "salesContractId" type string from "CONTRNO"
                set mandatory "salesContractStatus" type string from "ODS_STAT"
            }
            set mandatory "FinancialRelease" by {
                set mandatory "financialReleaseIndicator" type string from "FAKSK"
                set mandatory "financialReleaseDescription" type string from "VTEXT"
            }
        }
    }
    """
    vehicleInvoiceTransform = """
    jsonTransformation {
        set mandatory key from "E1EDK01" / "/BMW/ISI_I5024_E1EDK01" / "CONTRNO"
        add optional header / "iDocNumber" from header / "agathe.internal.source.iDocNumber"
        val sapDateField = "DATUM"
        val sapBillNoField = "BELNR"
        val PRODUCTION_ORDER_QUALIFIER = "001"
        val SAP_ORDER_QUALIFIER = "002"
        val BILLING_DATE_ID = "026"
        val dateById by value {
            (mandatory array "E1EDK03").associate {
                extract(it) { (mandatory string "IDDAT") to (mandatory string sapDateField) }
            }
        }
        val billingNoByQualifier by value {
            (mandatory array "E1EDK02").associate {
                extract(it) { (mandatory string "QUALF") to (mandatory string sapBillNoField) }
            }
        }
        val billingDateByQualifier by value {
            (mandatory array "E1EDK02").associate {
                extract(it) { (mandatory string "QUALF") to (mandatory string sapDateField) }
            }
        }
        val totalWithoutVat by value {
            mandatory array "E1EDK05" where {
                (mandatory string "KOTXT") in listOf(
                     "Total w/o tax",
                     "Nett Deposit Value",
                     "Down Pmnt amount"
                )
            } select {
                mandatory string "BETRG"
            }
        }
        val totalWithVat by value {
            mandatory array "E1EDK05" where {
                (mandatory string "KOTXT") in listOf(
                    "Transaction Price",
                    "Total Deposit Value",
                    "Down Pmnt amount"
                )
            } select {
                optional string "BETRG"
            }
        }
        val orgIdByQualifier by value {
            (mandatory array "E1EDK14").associate {
                extract(it) { (mandatory string "QUALF") to (mandatory string "ORGID") }
            }
        }
        val customerGroupByPartnerUsage by value {
            (mandatory array "E1EDKA1").associate {
                extract(it) { (mandatory string "PARVW") to (optional string "/BMW/ISI_I5024_E1EDKA1" / "KDGRP") }
            }
        }
        val destinationCountryByPartnerUsage by value {
            (mandatory array "E1EDKA1").associate {
                extract(it) { (mandatory string "PARVW") to (optional string "LAND1") }
            }
        }
        val sapBillingType by value { mandatory string orgIdByQualifier / "015" }
        within("E1EDK01") {
            set mandatory "currency" type string from "CURCY"
            set optional "termsOfPaymentKey" type string from "ZTERM"
            set optional "vatRegistrationNumber" type string from "EIGENUINR"
            set mandatory "billingDocumentNumber" type string from sapBillNoField
            within("/BMW/ISI_I5024_E1EDK01") {
                set optional "vin17" type string from "VHVIN"
                set optional "usedVehicleIndicator" type boolean from "USED_VEHICLE"
                set mandatory "businessType" type string from "BTYPE"
                set optional "processingType" type string from "PROCTYP"
                set mandatory "productType" type string from "PRODTY"
                set optional "netWeight" type number from "NET_WEIGHT"
                set mandatory "engine" by {
                    set optional "engineNumber1" type string from "ENGINE1"
                    set optional "engineNumber2" type string from "ENGINE2"
                    set optional "engineNumber3" type string from "ENGINE3"
                    set optional "engineNumber4" type string from "ENGINE4"
                    set optional "engineNumber5" type string from "ENGINE5"
                    set optional "engineNumber6" type string from "ENGINE6"
                    set optional "engineNumber7" type string from "ENGINE7"
                    set optional "engineNumber8" type string from "ENGINE8"
                    set optional "engineNumber9" type string from "ENGINE9"
                    set optional "engineNumber10" type string from "ENGINE10"
                }
                set optional "incoterms" type string from "LKOND"
                set mandatory "brand" type string from "BRAND"
                set optional "developmentModelRange" type string from "ESERIES"
                set optional "f2Date" type number from "F2DATE"
                set optional "customsTariffNumber" type string from "CCNGN"
                set optional "dealerFrontEndId" type string from "REFNUM"
                set mandatory "offerNumber" type string from "CONTRNO"
                set mandatory "offerVersion" type number from "VERSION"
                set optional "ivsrBillingType" type string from "VBTYP"
            }
        }
        set optional "customerGroup" from customerGroupByPartnerUsage / "RG"
        set mandatory "businessPartners" type array default emptyArray from "E1EDKA1" by {
            set mandatory "businessPartnerId" type string from "PARVW"
            set mandatory "businessPartnerType" type string from "PARTN"
            set optional "name1" type string from "NAME1"
            set optional "name2" type string from "NAME2"
            set optional "streetAndHouseNumber" type string from "STRAS"
            set optional "city" type string from "ORT01"
            set optional "postalCode" type string from "PSTLZ"
            set optional "country" type string from "LAND1"
            set optional "language" type string from "SPRAS"
        }
        set optional "destinationCountry" from destinationCountryByPartnerUsage / "WE"
        set optional "billingDocumentNumber" type string from billingNoByQualifier / "009"
        set optional "productionOrderNumber" type string from billingNoByQualifier / PRODUCTION_ORDER_QUALIFIER
        set optional "productionOrderDate" type number from billingDateByQualifier / PRODUCTION_ORDER_QUALIFIER
        set mandatory "sapOrderNumber" type string from billingNoByQualifier / SAP_ORDER_QUALIFIER
        set mandatory "sapOrderCreationDate" type number from billingDateByQualifier / SAP_ORDER_QUALIFIER
        set optional "vatNumber" type string from billingNoByQualifier / "084"
        set mandatory "billingDate" type number from dateById / BILLING_DATE_ID
        set optional "purchaseOrderDate" type number from dateById / "022"
        set mandatory "billingDocumentDate" type number from dateById / "012"
        set optional "idocCreationDate" type number from dateById / "011"
        set optional "fixedValueDate" type number from dateById / "024"
        set optional "dueDate" type number from dateById / "028"
        set optional "fxRateDate" type number from dateById / "048"

        set mandatory "headerAmount" by {
            set mandatory "totalWithoutVat" type number from totalWithoutVat / 0
            set optional "totalWithVat" type number from totalWithVat / 0
        }
        set optional "headerVat" from "E1EDK04" / 0 by {
            set optional "vatAmount" type number from "MWSBT"
            set optional "vatTaxKey" type string from "MWSKZ"
            set optional "vatRate" type number from "MSATZ"
        }
        set mandatory "sapSalesOrganisation" type string from orgIdByQualifier / "008"
        set mandatory "sapSalesDivision" type string from orgIdByQualifier / "006"
        set mandatory "sapBillingType" type string from sapBillingType
        set mandatory "sapCompanyCode" type string from orgIdByQualifier / "003"

        set optional "items" type array default emptyArray from "E1EDP01" by {
            val description by value {
                (mandatory array "E1EDP19")
                    .firstOrNull { extract(it) { (mandatory string "QUALF") == "002" } }
            }
            set optional "itemMaterialDescription" type string from description / "KTEXT"
            within("/BMW/ISI_I5024_E1EDP01") {
                set optional "itemMaterialNumber" type string from "MATNR"
                set optional "itemNumber" type number from "POSNR"
            }
            set optional "itemConditions" type array default emptyArray from "E1EDP05" by {
                set optional "conditionPlusMinus" type string from "ALCKZ"
                set optional "conditionType" type string from "KSCHL"
                set optional "conditionText" type string from "KOTXT"
                set optional "conditionAmount" type number from "BETRG"
                set optional "conditionCurrency" type string from "KOEIN"
            }
            set optional "itemVat" from "E1EDP04" / 0 by {
                set optional "itemVatTaxKey" type string from "MWSKZ"
                set optional "itemVatAmount" type number from "MWSBT"
                set optional "itemVatRate" type number from "MSATZ"
            }
        }
    }
    """
    vehiclePaymentTransform = """
    jsonTransformation {
        set mandatory key from "/BMW/ISI_I5027_HEADER"/"CONTRNO"
        add optional header / "iDocNumber" from header / "agathe.internal.source.iDocNumber"
        add optional header / "destinationCountry" type string from "/BMW/ISI_I5027_HEADER" / "LANDTX"
        add optional header / "sapSalesOrganisation" type string from "/BMW/ISI_I5027_HEADER" / "VKORG"
        within("/BMW/ISI_I5027_HEADER") {
            val billingIndicator by value { optional string "FKTYP" default "" }
            val paymentIndicator by value { optional string "SHKZG" default "" }
            switch {
                case { billingIndicator.value.isNotEmpty() && paymentIndicator.value.isEmpty() } then {
                    set optional "billingDocument" by {
                        set mandatory "billedAmountGross" type number from "GRSWR"
                        set optional "billedAmountNet" type number from "NETWR"
                        set optional "billedAmountVat" type number from "MWSBK"
                        set mandatory "billingIndicator" type string from "FKTYP"
                        set mandatory "currency" type string from "WAERK"
                        set mandatory "documentDate" type number from "FKDAT"
                        set mandatory "documentNumber" type string from "VBELN"
                        set optional "payerGeneralCustomerId" type string from "IDNUMBER"
                        set mandatory "payerSapNumber" type string from "KUNRG"
                        set optional "paymentDueDate" type number from "PMNTDUEDT"
                        set mandatory "sapBillingType" type string from "FKART"
                        set optional "sapBillingTypeDescription" type string from "VTEXT"
                        set mandatory "outstandingAmount" by {
                            set mandatory "outstandingAmountGross" type number from "OUTAMNT"
                        }
                        set mandatory "salesContract" by {
                            set optional "dealerFrontEndId" type string from "REFNUM"
                            set mandatory "salesContractId" type string from "CONTRNO"
                        }
                        set optional "salesOrder" by {
                            set optional "productionOrderNumber" type string from "BSTKD"
                            set optional "vin17" type string from "VHVIN"
                        }
                    }
                }
                case { paymentIndicator.value.isNotEmpty() && billingIndicator.value.isEmpty() } then {
                    set optional "paymentData" by {
                        set mandatory "currency" type string from "WAERS"
                        set mandatory "paymentAmountGross" type number from "PMNTGR"
                        set optional "paymentAmountNet" type number from "WRBTR"
                        set optional "paymentAmountVat" type number from "WMWST"
                        set optional "paymentDate" type number from "PAYDT"
                        set mandatory "paymentIndicator" type string from "SHKZG"
                        set optional "paymentReferenceNumber" type string from "XBLNR"
                        set mandatory "salesContract" by {
                            set optional "dealerFrontEndId" type string from "REFNUM"
                            set mandatory "salesContractId" type string from "CONTRNO"
                        }
                        set optional "salesOrder" by {
                            set optional "productionOrderNumber" type string from "BSTKD"
                            set optional "vin17" type string from "VHVIN"
                        }
                        set mandatory "outstandingAmount" by {
                            set mandatory "outstandingAmountGross" type number from "OUTAMNT"
                        }
                    }
                }
                default { process { error("billingIndicator (${billingIndicator.value}) or paymentIndicator (${paymentIndicator.value}) is incorrect") } }
            }
        }
    }
    """
    vehicleIntercoInvoiceTransform = """
    jsonTransformation {
        set mandatory key from "/BMW/ISI_I5026_HEADER" / "SERIAL_NUM"
        add optional header / "iDocNumber" from header / "agathe.internal.source.iDocNumber"
        within("/BMW/ISI_I5026_HEADER") {
            set mandatory "customsTariffNumber" type string from "CUSTOMS_TARIFF"
            set mandatory "documentDate" type string from "DOC_DATE"
            set mandatory "documentNumber" type string from "DOC_NUM"
            set mandatory "documentType" type string from "DOC_TYPE"
            set mandatory "headerAmount" / "totalWithoutVat" type number from "/BMW/ISI_I5026_HEADER_AMT" / "DOC_TOTAL_NET_AMT"
            set mandatory "intercompanySupplierId" type string from "SUPPLIER_CODE"
            set mandatory "invoiceType" type string from "INVOICE_TYPE"
            set mandatory "items" type array from "/BMW/ISI_I5026_ITEM" by {
                set mandatory "itemCondition" from "/BMW/ISI_I5026_ITEM_COND" by {
                    set mandatory "conditionAmount" type number from "COND_AMT"
                    set mandatory "conditionCurrency" type string from "COND_CURR"
                    set optional "conditionPlusMinus" type string from "DT_CT"
                    set optional "conditionText" type string from "COND_TEXT"
                    set mandatory "conditionType" type string from "COND_TYPE"
                }
                set optional "itemMaterialDescription" type string from "MAT_DESCR"
                set mandatory "itemMaterialNumber" type string from "AG_MODEL_CODE"
                set mandatory "positionNumber" type number from "POSITION_NR"
                set mandatory "positionTypeDescription" type string from "POSITION_TYPE_DESCR"
            }
            set mandatory "oilQuantity" type string from "OIL_QTY"
            set optional "oilTax" from "/BMW/ISI_I5026_OIL_TAX" by {
                set optional "totalAmountConsumptionTax" type number from "AMT_IMPOSTA_DI_CONS"
                set optional "totalAmountEnvironmentalContribution" type number from "AMT_CONTRIBUTO_COU"
                set optional "unitAmountConsumption" type number from "AMT_IMPOSTA_DI_CONS_KG"
                set optional "unitAmountEnvironmentalContribution" type number from "AMT_CONTRIBUTO_COU_KG"
          }
          set mandatory "originOfGoods" type string from "GOODS_ORIGIN"
          set mandatory "productionOrderNumber" type string from "PROD_ORDER"
          set mandatory "productType" type string from "PRODUCT_TYPE"
          set mandatory "protocolDate" type string from "PROTOCOL_DATE"
          set mandatory "protocolNumber" type string from "PROTOCOL_NUM"
          set mandatory "protocolType" type string from "PROTOCOL_TYPE"
          set optional "referenceInvoiceDate" type string from "REF_INV_DATE"
          set optional "referenceInvoiceNumber" type string from "REF_INV"
          set optional "referenceInvoiceProtocolDate" type string from "REF_INV_PROTOCOL_DATE"
          set optional "referenceInvoiceProtocolNumber" type string from "REF_INV_PROTOCOL_NUMBER"
          set optional "referenceInvoiceProtocolType" type string from "REF_INV_PROTOCOL_TYPE"
          within("/BMW/ISI_I5026_VAT") {
              set mandatory "vatAmount" type number from "VAT_AMOUNT"
              set mandatory "vatPercentage" type number from "VAT_PERCENTAGE"
              set mandatory "vatTaxKey" type string from "VAT_TAX_KEY"
          }
          set mandatory "vehicleWeight" type string from "VEH_WEIGHT"
          set mandatory "vin17" type string from "SERIAL_NUM"
        }
    }
    """
    vehicleCommissionTransform = """
    jsonTransformation {
        set mandatory key from "E1EDK01" / "BELNR"
        add optional header / "iDocNumber" from header / "agathe.internal.source.iDocNumber"
        val dateLookup by value {
            (mandatory array "E1EDK03").associate {
                extract(it) { (mandatory string "IDDAT") to (mandatory string "DATUM") }
            }
        }
        val organisationalValueLookUp by value {
            (mandatory array "E1EDK14").associate {
                extract(it) { (mandatory string "QUALF") to (mandatory string "ORGID") }
            }
        }
        val generalDateLookup by value {
            (mandatory array "E1EDK02").associate {
                extract(it) { (mandatory string "QUALF") to (mandatory string "DATUM") }
            }
        }
        val documentDataLookUp by value {
            (mandatory array "E1EDK02").associate {
                extract(it) { (mandatory string "QUALF") to (mandatory string "BELNR") }
            }
        }
        set mandatory "billingDate" type string from dateLookup / "026"
        set mandatory "billingDocumentDate" type string from dateLookup / "012"

        within("E1EDK01") {
            set mandatory "currency" type string from "CURCY"
            set mandatory "billingDocumentNumber" type string from "BELNR"
            set optional "vatRegistrationNumber" type string from "EIGENUINR"
            set optional "vatNumber" type string from "KUNDEUINR"
            set optional "termsOfPaymentKey" type string from "ZTERM"
            within("/BMW/ISI_I5024_E1EDK01") {
                set optional "f2Date" type string from "F2DATE"
                set optional "incoterms" type string from "LKOND"
            }
        }
        val legalHst by nullableVariable<String>()
        val custGrp by nullableVariable<String>()
        set mandatory "businessPartners" type array from "E1EDKA1" by {
            val businessPartnerType by value { mandatory string "PARVW" }
            val businessPartnerTypeMapping = mapOf(
                "RS" to "Invoicing party (RS)",
                "AG" to "Sold-to party (AG)",
                "RE" to "Bill-to party (RE)",
                "RG" to "Payer (RG)",
                "WE" to "Ship-to party (WE)",
                "ZZ" to "Keeper (ZZ)",
                "ZG" to "Condition Provider (ZG)",
                "ZE" to "Owner (ZE)",
            )
            set mandatory "businessPartnerType" map {
                businessPartnerTypeMapping[it] ?: it
            } from businessPartnerType
            whenever { businessPartnerType.value == "RE" } then {
                within("/BMW/ISI_I5024_E1EDKA1") {
                    add mandatory header / "legalEntityHstNumber" type string from "HSTLEG"
                    add mandatory header / "customerGroup" type string from "KDGRP"
                    set variable legalHst from "HSTLEG"
                    set variable custGrp from "KDGRP"
                }
            }
            within("/BMW/ISI_I5024_E1EDKA1") {
                set optional "vendorNumber" type string from "LIFNR"
                set optional "centralHstBuno" type string from "HSTCENT"
                set optional "vatOnDebit" type string from "KATR8"
            }
            set mandatory "businessPartnerId" type string from "PARTN"
            set mandatory "businessPartnerType" type string from "PARVW"
            set optional "city" type string from "ORT01"
            set optional "country" type string from "LAND1"
            set optional "language" type string from "SPRAS_ISO"
            set optional "name1" type string from "NAME1"
            set optional "name2" type string from "NAME2"
            set optional "postalCode" type string from "PSTLZ"
            set optional "streetAndHouseNumber" type string from "STRAS"
        }
        set mandatory "legalEntityHstNumber" from { "${legalHst.value}" }
        set mandatory "customerGroup" from { "${custGrp.value}" }
        set optional "dueDate" type string from dateLookup / "028"
        set optional "fixedValueDate" type string from dateLookup / "024"
        set optional "fxRateDate" type string from dateLookup / "048"

        set mandatory "items" type array from "E1EDP01" by {
            val itemOrderDateLookUp by value {
                (mandatory array "E1EDP03").associate {
                    extract(it) { (mandatory string "IDDAT") to (mandatory string "DATUM") }
                }
            }
            within("/BMW/ISI_I5024_E1EDP01") {
                set optional "businessType" type string from "BTYPE"
                set optional "developmentModelRange" type string from "ESERIES"
                set mandatory "itemMaterialNumber" type string from "MATNR"
                set optional "itemModelCode" type string from "KDMAT"
                set optional "itemNumber" type string from "POSNR"
                set optional "productType" type string from "PRODTY_I"
                set optional "usedVehicleIndicator" type boolean from "USED_VEHICLE"
                set mandatory "vin17" type string from "VHVIN_I"

                whenever { optional string "WELFARE_AMOUNT" != "" } then {
                    set optional "welfareContributionAmount" type number from "WELFARE_AMOUNT"
                }
                whenever { optional string "WELFARE_PER" != "" } then {
                    set optional "welfareContributionPercentage" type number from "WELFARE_PER"
                }
                whenever { optional string "WHT_AMOUNT" != "" } then {
                    set optional "withholdingTaxAmount" type number from "WHT_AMOUNT"
                }
                whenever { optional string "WHT_PER" != "" } then {
                    set optional "withholdingTaxPercentage" type number from "WHT_PER"
                }
            }
            within("E1EDP05") {
                set mandatory "itemConditions" type array by {
                    set mandatory "conditionCurrency" type string from "KOEIN"
                    set optional "conditionPlusMinus" type string from "ALCKZ"
                    set optional "conditionText" type string from "KOTXT"
                    set mandatory "conditionType" type string from "KSCHL"
                    within("/BMW/ISI_I5024_E1EDP05") {
                        set optional "agentRoleDescription" type string from "ROLE_DESCR"
                        set optional "commissionPercentage" type number from "SHARE_VAL"
                        set optional "distributionChannel" type string from "DIST_CHANNEL"
                        set optional "itemMaterialDescription" type string from "DESCR"
                        set optional "conditionAmount" type number from "KBETR"
                        set optional "measureBasisType" type string from "MEASURE_BASE"
                        set optional "measureCatDescription" type string from "MEA_CAT_DESCR"
                        set optional "measureCategory" type string from "MEACAT"
                        set optional "measureId" type string from "MEAID"
                        set optional "ofcoContractNo" type string from "CONTRNO"
                        set optional "pointInTime" type string from "PIT_TYPE"
                        set optional "salesChannel" type string from "SALES_CHANNEL"
                        set optional "salesChannelDescription" type string from "SALES_CHANNEL_DESCR"
                        set optional "torDate" type string from "TORDAT"
                        set optional "valueBase" type string from "VALUEBAS"
                        set optional "valueType" type string from "VAL_TYPE"
                        set optional "vehicleBaseValue" type number from "BASE_VALUE"
                    }
                }
            }
            set optional "itemVat" from "E1EDP04" / 0 by {
                set mandatory "itemVatAmount" type number from "MWSBT"
                set mandatory "itemVatRate" type number from "MSATZ"
                set mandatory "itemVatTaxKey" type string from "MWSKZ"
            }
            within("E1EDP03") {
                set optional "purchaseOrderDate" type string from itemOrderDateLookUp / "022"
            }
        }
        set optional "sapBillingType" type string from organisationalValueLookUp / "015"
        set optional "sapCompanyCode" type string from organisationalValueLookUp / "003"
        set mandatory "sapOrderCreationDate" type string from generalDateLookup / "002"
        set mandatory "sapOrderNumber" type string from documentDataLookUp / "002"
        set optional "sapSalesDivision" type string from organisationalValueLookUp / "006"
        set optional "sapSalesOrganisation" type string from organisationalValueLookUp / "008"
        set optional "agentReferenceNumber" type string from documentDataLookUp / "010"
    }
    """
}

instance-info {
  app-id = APP-119965
  appd-id = APPD-323071
  app-name = "COSMIC International"
  instance-type = SAPKAFKA
  itsm-service = "fin-cosmic-intl:global"
  itsm-group = "ao-fin-cosmic-intl:global:2nd"
}